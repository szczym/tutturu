<?php

// $Id$

/**
 * This file contains the integration between Media Mover and CCK
 * Options for harvesting from and storing to are provided
 */

define('MM_CCK_HARVEST', 1);
define('MM_CCK_STORE', 2);
define('MM_CCK_COMPLETE', 3);

/**
 * This overrides the CCK FileField file formater so that non-local files
 * can be used in CCK fields. This is yucky, but I do not see any way around
 * this at the moment. Is likely to be a problem in Views display
 * @param $file
 *   array, drupal file
 */
function phptemplate_filefield_file($file) {
  // Views may call this function with a NULL value, return an empty string.
  if (empty($file['fid'])) {
    return '';
  }

  // can we find a MM file for this file?
  // This is the only change to this theme function 
  if ($mm_file = media_mover_api_file_fetch(array('fid' => $file['fid']))) {
    // get the last file
    if ($url = media_mover_api_config_current_file($mm_file, 'final')) {
      // should we set an absolute url?
      if (strstr('http', $url)) {
        $options['absolute'] = true;
      }
    }
  }
  else { 
    $path = $file['filepath'];
    $url = file_create_url($path);
  }
  
  $icon = theme('filefield_icon', $file);

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  // TODO: Possibly move to until I move to the more complex format described 
  // at http://darrelopry.com/story/microformats-and-media-rfc-if-you-js-or-css
  $options = array(
    'attributes' => array(
      'type' => $file['filemime'] . '; length=' . $file['filesize'],
    ),
  );

  // Use the description as the link text if available.
  if (empty($file['data']['description'])) {
    $link_text = $file['filename'];
  }
  else {
    $link_text = $file['data']['description'];
    $options['attributes']['title'] = $file['filename'];
  }

  return '<div class="filefield-file clear-block">'. $icon . l($link_text, $url, $options) .'</div>';
}




/**
 * Implementation of media_mover hook
 * @param string $op
 *   is the operator to return
 * @param int $action
 *   action id that is being called
 * @param array $configuration is the specific configuration saved for the action for this configuration
 * @param array $file
 *   is the file in use
 * @param array $running_config
 *   is the full configuration data currently running
 * @param int $nid
 *   special param for processing individual nodes
 */
function mm_cck_media_mover($op, $action = null, $configuration = null, &$file = array(), $running_config = null, $nid = null) {
  if (module_exists('content')) {
    switch ($op) {
      case 'name':
        return t('Media Mover CCK module');

      case 'actions':
        return array(
          'harvest' => array(MM_CCK_HARVEST => t('Harvest from a CCK field')),
          'storage' => array(MM_CCK_STORE => t('Save data in a CCK field')),
          'complete' => array(MM_CCK_COMPLETE => t('Save data in a CCK field')),
        );

      case 'config':
        switch ($action) {
          case MM_CCK_HARVEST:
            return mm_cck_config_harvest($action, $configuration);

          case MM_CCK_COMPLETE:
          case MM_CCK_STORE:
            return mm_cck_config_save_node($configuration);
        }
        break;

      case 'harvest':
        return mm_cck_harvest($configuration, $nid);        
      break;

      case 'complete':
      case 'storage':
        return mm_cck_node_save($configuration, $file);

      case 'delete':
        if ($action == MM_CCK_STORE) {
          // @TODO: check action that is being deleted and remove single files based on config
        }
        break;
    }
  }
}

/**
 * Media Mover: Media Mover hook functions
 */

/**
 * return the configuration form for harvesting from CCK fields
 */
function mm_cck_config_harvest($action, $configuration) {
  $form = array();
  $form['mm_cck_harvest_conf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Harvest Configuration'),
    '#description' => t('This module harvests files attached to a CCK field'),
  );
  // get content types
  if ($types = node_get_types()) {
    foreach ($types as $type) {
      $options[$type->type] = $type->name;
    }
  }
  $form['mm_cck_harvest_conf']['mm_cck_havest_node_type'] = array(
    '#title' => t('Select content types to harvest from'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $configuration['mm_cck_havest_node_type'],
    '#description' => t('Choose which content types to harvest from.'),
  );
  $form['mm_cck_harvest_conf']['mm_config_harvest_field'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Select files from these CCK fields'),
    '#description' => t('Select the CCK fields to harvest files from.'),
    '#options' => mm_cck_fields(),
    '#default_value' => $configuration['mm_config_harvest_field'],
  );
  $form['mm_cck_harvest_conf']['file_types'] = array(
    '#title' => t('File types'),
    '#type' => 'textfield',
    '#default_value' => $configuration['file_types'] ? $configuration['file_types'] : 'avi mov wmv mpeg mp4 mpeg2 dv 3gp 3g2 mpeg4',
    '#description' => t('Space separated list of file types that can be harvested. These are file extensions and are values like "avi mov wmv mpeg mp4 mpeg2 dv".'),
  );
  return $form;
}


/**
 * Return the configuration form for saving to CCK fields
 * @param int $action
 * @param array $configuration
 * @return array
 */
function mm_cck_config_save_node($configuration) {
  $form = array();
  $form['mm_cck_'. $configuration['verb']] = array(
    '#type' => 'fieldset',
    '#title' => t('CCK !verb Configuration', array('!verb' => $configuration['verb'])),
    '#description' => t('This module saves data to a CCK field'),
    '#collapsed' => false,
  );
  // add the $action extension to keep name spacing
  $form['mm_cck_'. $configuration['verb']]['mm_cck_field_save_'. $configuration['verb']] = array(
    '#type' => 'select',
    '#title' => t('Save the file to this CCK field'),
    '#description' => t('Select the CCK field to save files to. There must be incoming node data for this to function correctly.'),
    '#options' => mm_cck_fields(),
    '#default_value' => $configuration['mm_cck_field_save_'. $configuration['verb']],
  );
  $form['mm_cck_'. $configuration['verb']]['mm_cck_new_node_'. $configuration['verb']] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new node with data'),
    '#description' => t('Create a new node with the data that was harvested.'),
    '#default_value' => $configuration['mm_cck_new_node_'. $configuration['verb']] ? $configuration['mm_cck_new_node_'. $configuration['verb']] : 0,
  );
  
  // ----------------------------------
  // Node creation options
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']] = array(
    '#type' => 'fieldset',
    '#title' => t('Node creation options'),
    '#collapsed' => $configuration['mm_cck_new_node_'. $configuration['verb']] ? false : true,
    '#collapsible' => true,
    '#description' => t('When creating a new node, these options will be used'),
  );
  // get content types
  if ($types = node_get_types()) {
	  foreach ($types as $type) {
	    $options[$type->type] = $type->name;
	  }
  }
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_save_type_'. $configuration['verb']] = array(
    '#title' => t('Save node as type'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $configuration['mm_cck_save_type_'. $configuration['verb']],
    '#description' => t('Save the harvested and processed data as this node type'),
  );
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_save_author_'. $configuration['verb']] = array(
    '#type' => 'textfield',
    '#title' => t('Default author'),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => $configuration['mm_cck_save_author_'. $configuration['verb']] ? $configuration['mm_cck_save_author_'. $configuration['verb']]  : t('Anonymous'),
    '#description' => t('If a user is not passed in, this will be the default author.'),
  );
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_title_default_'. $configuration['verb']] = array(
    '#type' => 'textfield',
    '#title' => t('Default title'),
    '#maxlength' => 60,
    '#default_value' => $configuration['mm_cck_title_default_'. $configuration['verb']],
    '#description' => t('If a title is not passed in, this will be the default node title. If left blank and there is no title information, the file name will be used.'),
  );
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_body_default_'. $configuration['verb']] = array(
    '#type' => 'textarea',
    '#title' => t('Default body'),
    '#default_value' => $configuration['mm_cck_body_default_'. $configuration['verb']],
    '#description' => t('If a body is not passed in, this will be the default node body.'),
  );
  $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_save_options_'. $configuration['verb']] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node options'),
    '#options' => array(
      'comment' => t('Enable comments'),
      'status' => t('Published'),
      'promoted' => t('Promoted to front page'),
      'sticky' => t('Sticky at the top of lists'),
      ),
     '#default_value' => $configuration['mm_cck_save_options_'. $configuration['verb']] ? $configuration['mm_cck_save_options_'. $configuration['verb']] : array(),    
  );
  // language options
  if (module_exists('locale')) {
    $options = locale_language_list();
    $form['mm_cck_'. $configuration['verb']]['node_create_'. $configuration['verb']]['mm_cck_save_language_'. $configuration['verb']] = array(
      '#type' => 'select',
      '#title' => t('Save node in language'),
      '#description' => t('Save the node in this language when creating it'),
      '#options' => $options['name'],
      '#default_value' => $configuration['mm_cck_save_language_'. $configuration['verb']],
    );
  }

  // ------------
  $form['mm_cck_'. $configuration['verb']]['mm_cck_file_replace_'. $configuration['verb']] = array(
    '#type' => 'checkbox',
    '#title' => t('Replace original file'),
    '#description' => t('If the file was originally harvested from this CCK field, attempt to replace the original with the converted file. Make sure your harvest operation will not harvested this file again. If the file can not be replaced, it will be appended.'),
    '#default_value' => $configuration['mm_cck_file_replace_'. $configuration['verb']] ? $configuration['mm_cck_file_replace_'. $configuration['verb']] : 0,
  );
  $form['mm_cck_'. $configuration['verb']]['field_save_list_'. $configuration['verb']] = array(
    '#type' => 'checkbox',
    '#title' => t('List File'),
    '#description' => t('List file automatically on the node.'),
    '#default_value' => $configuration['field_save_list_'. $configuration['verb']] ? $configuration['field_save_list_'. $configuration['verb']] : 0,
  );
  return $form;
}


/**
 * Harvest files from a CCK field
 * @param array $configuration
 *   the configuration array
 * @param int $nid
 *   node id if a single node is being processed
 * @return array
 */
function mm_cck_harvest($configuration, $nid) {
  $files = array();
  $fields = content_fields();

  $harvest_conditions = '';
  // are we harvesting from a specific NID ?
  if ($nid) {
    $harvest_conditions = ' AND n.nid = '. $nid;
  }

  // we need to harvest from each field that was selected
  foreach ($configuration['mm_config_harvest_field'] as $field_name) {
    // get the relevant database information for this field
    $db_info = content_database_info($fields[$field_name]);

    // change the query based on field type
    switch ($fields[$field_name]['type']) {
      case 'text':
        //$node->{$field['field_name']} = array(array('value' => $file['process_file']));
      break;

      // handle image field case
      case 'filefield':
      case 'image':
        // are file types being checked?
        if ($configuration['file_types']) {
          $types = explode(' ', $configuration['file_types'] );
          foreach ($types as $type) {
            $conditions[] = "f.filepath LIKE '%%.$type%'";
          }
          // build the SQL to check against the file types
          $file_type_conditions = ' AND ('. implode(' OR ', $conditions) .')';
        }

        $results = db_query('SELECT f.filepath AS harvest_file, n.nid, f.fid FROM {files} f
          LEFT JOIN {'. $db_info['table'] .'} c ON c.'. $db_info['columns']['fid']['column'] .' = f.fid
          LEFT JOIN {node} n ON c.nid = n.nid
          LEFT JOIN {media_mover_files} m ON m.fid = f.fid AND m.cid = %d
          WHERE  ((n.nid IS NOT NULL AND m.nid IS NULL)
            OR (n.nid IS NOT NULL AND n.nid = m.nid AND f.filepath <> m.harvest_file))
            AND n.type = "%s" 
            '. $file_type_conditions .'
          ORDER BY f.timestamp', $configuration['cid'], $configuration['mm_cck_havest_node_type']);

        // now build the out going file data
        while ($result = db_fetch_array($results)) {
          $files[] = $result;
        }
      break;
    }
  }
  return $files;
}


/**
 * Save to the CCK field
 * @param array $configuration
 *   the configuration array
 * @param array $file
 *   media mover file array
 * @return string
 *   new file location
 */
function mm_cck_node_save($configuration, &$file) {

  // get the path to the file to operate on. We need this to pass out of the function
  $filepath = media_mover_api_config_current_file($file);

  // is there a node attached to this file?
  $node = media_mover_api_get_node_from_file($file);

  // is there a node attached to the $file array and we are not supposed to create a new node
  if (! $node && ! $configuration['mm_cck_new_node_'. $configuration['verb']]) {
    // set an alert
    watchdog('Media Mover CCK', 'No node data was passed for storing file data in a specified CCK field: !file',
      array('!file', l(t($file['mmfid']),  'admin/media_mover/file/edit/'. $file['mmfid'])), WATCHDOG_ERROR);
    // we can not save the file; exit
    return;
  } 
  
  // Should we start building a new node?
  if ($configuration['mm_cck_new_node_'. $configuration['verb']]) {
	  // start building the node
	  $node = new STDClass();
	  // set node type
	  $node->type = $configuration['mm_cck_save_type_'. $configuration['verb']];
	
	  // set the title
	  if (! $node->title = $configuration['mm_cck_title_default_'. $configuration['verb']]) {
	  	if (! $node->title = $file['data']['node']->title) {
	  		$node->title = basename($filepath);
	  	}
	  }

	  // set the body, cascade from default to nothing
	  if (! $node->body = $configuration['mm_cck_body_default_'. $configuration['verb']]) {
	  	if (! $node->body = $file['data']['node']->body) {
	  		$node->body = '';
	  	}
	  }
	
	  // if we have a language setting
	  $node->language = $configuration['mm_cckn_save_language_'. $configuration['verb']] ? $configuration['mm_ccknode_save_language'] : null;
	  
	  // node options
	  $node->comment = $configuration['mm_cck_save_options_'. $configuration['verb']]['comment'] ? 2 : 0;
	  $node->status = $configuration['mm_cck_save_options_'. $configuration['verb']]['status'] ? 1 : 0;
	  $node->sticky = $configuration['mm_cck_save_options_'. $configuration['verb']]['sticky'] ? 1 : 0;
	  $node->promote = $configuration['mm_cck_save_options_'. $configuration['verb']]['promote'] ? 1 : 0;

	  // Now build the node author
  	if (! $user = $file['data']['user']) {
  	  if (! $user = user_load(array('name' => $configuration['mm_cck_save_author_'. $configuration['verb']]))) {
  		  $user = user_load(array('uid' => 0));
  	  }
  	}  	
  	
  	// attach the user data to the node
    $node->uid = $user->uid;
    $node->name = $user->name;
    $node->mail = $user->mail;

  	// save the new node to prepare to add the CCK data
  	node_save($node);
  	$file['nid'] = $node->nid;
  	
  }  
 
  // get the field that we will save to
  $field = content_fields($configuration['mm_cck_field_save_'. $configuration['verb']]);

  // if we have an fid, and should just replace, return the current file.
  if ($file['fid'] &&  
    $configuration['mm_cck_file_replace_'. $configuration['verb']] &&
    mm_cck_find_file_id($node, $field, $file['fid']) &&
    ! $configuration['mm_cck_new_node_'. $configuration['verb']]) {
      $file['data']['node'] = $node;
      return $filepath;
  }

  // if we are creating a new node, but the file is non-local, we need to either
  // find a local file or fail.
  if ($local_file = mm_cck_find_local_file($file)) {
    // we need to add an new file to the node
    switch ($field['type']) {
      case 'text':
        $node->{$field['field_name']} = array(array('value' => $local_file));
    	  // save the node
        node_save($node);
        // clear the cache
        cache_clear_all('content:'. $node->nid .':'. $node->vid, 'cache_content');
    	  $file['filepath'] = $filepath;
      break;
  
      // handle CCK image and CCK file field cases
    	case 'image':
    	case 'filefield':
    	  if (! $new_file = mm_cck_field_filefield($node, $field, $local_file, $configuration)) {
    	  	return;
    	  }
    	break;
    }

    // attach the data to the node
    $file['data']['node'] = $node;
    // assign the new fid
    $file['fid'] = $new_file['fid'];

    // return the cck file
    if (! strstr($filepath, 'http://')) {
      return $new_file['filepath'];
    }
    // the file is not local, return the 
    // last used file
    return $filepath;
    
  }
}


/**
 * Helper function to map file to CCK file fields
 * @param array $node
 *   Drupal node object
 * @param array $field
 *   CCK field array
 * @param string $filepath
 *   The file path
 * @param array $configuration
 * @return array
 */
function mm_cck_field_filefield(&$node, $field, $filepath, $configuration) {
  // is there a specified directory to use with this field?
  $destination_path = mm_cck_field_widget_files_directory($field);

  // make sure we can access the file functions
  module_load_include('inc', 'filefield', 'field_file' );
  
  // get the validators for this field
  if ($field['type'] == 'image') {
    $validators = array_merge(filefield_widget_upload_validators($field), imagefield_widget_upload_validators($field));
  }
  else { $validators = filefield_widget_upload_validators($field);}

  // now get the new field
  if (! $new_file = field_file_save_file($filepath, $validators, $destination_path)) {
    watchdog('MM Content', 'Could not save file', null, WATCHDOG_ERROR);
    return;
  }

  // we need to alter the file object slightly so it will display correctly
  $new_file['data'] = array('description' => '');
  // do we list the file?
  $new_file['list'] = $configuration['field_save_list'];

  // add the file on to the node
  $node->{$field['field_name']}[] = $new_file;
  // save the node
  node_save($node);
  // clear the cache
  cache_clear_all('content:'. $node->nid .':'. $node->vid, 'cache_content');
  return $new_file;
}


/**
 * Create a destination path
 * @param $field
 * @return unknown_type
 */
function mm_cck_field_widget_files_directory($field) {
  $widget_file_path = $field['widget']['file_path'];
  if (module_exists('token')) {
    global $user;
    $widget_file_path = token_replace($widget_file_path, 'user', $user);
  }
  return file_directory_path() .'/'. $widget_file_path;
}


/**
 * Return array of content fields for display in configuration forms.
 */
function mm_cck_fields() {
  $fields = array();
  foreach (content_fields() as $field) {
    $fields[$field['field_name']] = $field['widget']['label'];
  }
  return $fields;
}


/**
 * Helper function to find a CCK file field with a specific $fid
 * @param $node
 *   object, drupal node
 * @param $field
 *   array, CCK field
 * @param $fid
 *   int, file id
 * @return int
 */
function mm_cck_find_file_id($node, $field, $fid) {
  if ($node->{$field['field_name']}) {
    foreach ($node->{$field['field_name']} as $id => $nodefile) { 
      // make sure that this file exists on this node
      if ($nodefile['fid'] == $fid) {
        return true;
      }
    }
  }
  return false;
}


/**
 * This is a helper function to find a local file in the files list so that
 * CCK does not die when we try to save the file to it.
 * @param $file
 * @return unknown_type
 */
function mm_cck_find_local_file($file) {
  for ($i = MMA_FILE_STATUS_COMPLETE_COMPLETE; $i >= 0; $i--) {
    if ($filename = $file[media_mover_api_verb_base_status($i) .'_file']) {         
      if (! strstr($filename, 'http://') && count($filename)) {
        return $filename;
      }
    }
  }
}
