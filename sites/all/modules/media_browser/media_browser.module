<?php
// $Id: media_browser.module,v 1.9 2009/06/09 12:08:19 antoniodemarco Exp $

/**
 * @file
 *   Provide Media Browser plugin to Views.
 */

/**
 * Implementation of hook_views_api().
 */
function media_browser_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_init()
 */
function media_browser_init() {
  drupal_add_css(drupal_get_path('module', 'media_browser'). '/css/media_browser.css');
  drupal_add_js(drupal_get_path('module', 'media_browser'). '/js/media_browser.js');
}

/**
 * Implementation of hook_menu()
 */
function media_browser_menu() {
  $items = array();
  $items['node/%node/media_browser'] = array(
    'title' => t('Media Browser Handler'),
    'page callback' => 'media_browser_request_handler',
    'page arguments' => array(1, 4), 
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    );
  return $items;
}

/**
 * Handle a media browser request regardless if it is AJAX or not
 *
 * @param
 *    Rendered attached view
 */
function media_browser_request_handler($node, $display) {

  list($view, $display_id, $offset) = explode('.', $display);
  media_browser_set_variable($view.'.'.$display_id, $node->nid);
  media_browser_set_variable($view.'.'.$display_id.' offset', $offset);
  media_browser_set_variable('current display', $display_id); 
  media_browser_set_variable('media_browser_request_handler call', TRUE); 
  list(, $destination) = explode('/destination/', $_GET['q']);
  if (!$destination) {
    drupal_goto('/');
  }
  
  if (!empty($_POST['js'])) {
    $view = views_get_view($view);
    $attachment_display = $view->display[$display_id]->display_options['style_options']['media_browser']['attachment_display'];
    $attachment = $view->render($attachment_display);
    drupal_json(array('attachment' => $attachment));
    return;
  }
  else {
    drupal_goto($destination);
  }
}

/**
 * Implementation of hook_views_pre_build()
 */
function media_browser_views_pre_build(&$view) {

  if ($view->display_handler instanceof views_plugin_display_attachment) {    
    $current_display = media_browser_get_variable('current display'); 
    if ($view->display_handler->options['displays'][$current_display]) {
      $key = $view->name.'.'.$current_display;
      if ($nid = media_browser_get_variable($key)) {
        if (media_browser_get_variable($key.' offset') !== FALSE) {
          
          $fields = $view->display[$current_display]->handler->options['fields'];
          foreach ($fields as $name => $field) {
            if (isset($field['multiple']) && $field['media_browser'] == 'link_to_field') {
              $view->display_handler->options['fields'][$name]['multiple']['multiple_from'] = media_browser_get_variable($key.' offset');
            }
          }
        }

        media_browser_numeric_filter($view, $nid);
        if (media_browser_set_variable('media_browser_request_handler call')) {
          media_browser_unset_variable($key);
          media_browser_unset_variable('current display');
          media_browser_set_variable('media_browser_request_handler call', FALSE);
        }
      }
    }
  }  
}

/**
 * Implementation of hook__preprocess_views_view()
 */
function media_browser_preprocess_views_view(&$vars) {
  
  if ($attachment_id = media_browser_get_attachment($vars['view'])) {
    $position = $vars['view']->display[$attachment_id]->handler->options['attachment_position'];
    $attachment = $vars['attachment_'. $position];
    $vars['attachment_'. $position] = '';
    $style = $vars['view']->display[$vars['view']->current_display]->handler->get_plugin();
    $options = $style->options['media_browser']; 
    $options['class'] = $vars['view']->name. '_' .$vars['view']->current_display;
    
    $vars['rows'] = theme('media_browser', $vars['rows'], $attachment, $options);
  }
}

/**
 * Implementation of hook_views_pre_render()
 */
function media_browser_views_pre_render(&$view) {
  
  if (media_browser_get_attachment($view)) {
    $class = $view->name.'_'.$view->current_display;
    foreach ($view->field as $name => $field) {
      if (isset($field->options['media_browser'])) {
        $options['link_to_node'] = 1;
        $options['alter']['prefix'] = '<span class="media_browser_link '.$class.'">';
        $options['alter']['suffix'] = '</span>';
        drupal_add_js("$(document).ready(function() {media_browser_bind('". $class ."');});", 'inline');
        media_browser_set_field_options($view, $name, $options);
        foreach ($view->result as $key => $result) {
          $view->result[$key]->nid = media_browser_new_path($view, $field, $view->result[$key]->nid, $key);
        }
      }
    }
  }
}

/**
 * Implementation if hook_form_alter()
 */
function media_browser_form_alter(&$form, $form_state, $form_id) {
  
  // Alter field handler settings form
  if ($form_id == 'views_ui_add_item_form' || $form_id == 'views_ui_config_item_form') {
    if (isset($form['options']['link_to_node'])) {
      $form['options']['media_browser'] = array(
        '#title' => t('Media Browser'),
        '#type' => 'radios',
        '#options' => array(
          'link_to_node' => t('Link to a node').'<div class="description">'.t('The content is a diffrent node.').'</div>',
          'link_to_field' => t('Link to a field').'<div class="description">'.t('The content is a single value of a multi-value field.').'</div>',
        ),
        '#default_value' => isset($form_state['handler']->options['media_browser']) ? $form_state['handler']->options['media_browser'] : 'link_to_node',
      );
    }
  }

  // Alter display settings form
  if ($form_id == 'views_ui_edit_display_form' && strstr($form['#section'], '-style_options') !== FALSE && !($form_state['view']->display_handler instanceof views_plugin_display_attachment)) {
    $style = $form_state['view']->display_handler->get_plugin();
    $form['style_options']['media_browser'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Media Browser'), 
      '#weight' => 5, 
      '#collapsible' => TRUE, 
      '#collapsed' => FALSE,
    );
    $form['style_options']['media_browser']['image'] = array(
     '#type' => 'markup',
     '#value' => '<div class="media_browser"><img src="'.base_path().drupal_get_path('module', 'media_browser').'/images/media_browser.png"/></div>',
    );
    $form['style_options']['media_browser']['media_browser_enabled'] = array(
      '#type' => 'checkbox', 
      '#title' => t('Enable Media Browser'),
      '#default_value' => $style->options['media_browser']['media_browser_enabled'] ? $style->options['media_browser']['media_browser_enabled'] : NULL,
      '#description' => t('Enable Media Browser on this display'),
    );
      
    if ($form_state['view']) {
      $attachments = media_browser_get_attachements($form_state['view']);
      if ($attachments) {
        $form['style_options']['media_browser']['attachment_display'] = array(
         '#type' => 'radios',
         '#title' => t('Attachment Display'),
         '#options' => $attachments,
         '#default_value' => $style->options['media_browser']['attachment_display'] ? $style->options['media_browser']['attachment_display'] : NULL,
         '#description' => t('Choose the attachment display showing the full content.'),
        );
      }
      else {
        $form['style_options']['media_browser']['attachment_display'] = array(
         '#type' => 'item',
         '#title' => t('Attachment Display'),
         '#value' => '<div class="description"><span style="color: red"><b>'.t('Attention').'</b>: </span>'.t('No attachment display found for the current display. Media Browser requires an attachment display rendering the full content you want to display.').'</div>',
        );
      }
    }
    
    $form['style_options']['media_browser']['position'] = array(
      '#type' => 'select', 
      '#title' => t('Position'),
      '#options' => array(
        'right' => t('Right'), 
        'left' => t('Left'), 
        'top' => t('Top'), 
        'bottom' => t('Bottom'), 
      ),
      '#default_value' => $style->options['media_browser']['position'] ? $style->options['media_browser']['position'] : 'right',
      '#description' => t('Position of the List Display'),
    );
    
  }
}

/**
 * Implementation of hook_theme().
 */
function media_browser_theme() {
  $path = drupal_get_path('module', 'media_browser') .'/theme';
  return array(
    'media_browser' => array(
      'template' => 'media_browser',
      'path' => $path,
      'arguments' => array('rows' => array(), 'attachment' => NULL, 'options' => array()),
    ),
  );
}  

/**
 * Themes rows with a preselected template.
 */
function theme_media_browser_view(&$view, $options = array(), $rows = array()) {
  $attachment_display = $options['attachment_display'];
  $position = 'attachment_'.$view->display[$attachment_display]->display_options['attachment_position'];
  $attachment = $view->{$position};
  $view->{$position} = 0;
  return theme('media_browser', $rows, $options, $attachment);
}

/**
 * Helper function: get displays attached to the current one
 *
 * @param $view
 *    View object
 * @return
 *    Attachment displays list
 */
function media_browser_get_attachements(&$view) {
  $attachments = array();
  foreach ($view->display as $display_id => $display) {
    if ($display->display_plugin == 'attachment' && $display->display_options['displays'][$view->current_display]) {
      $attachments[$display_id] = $display->display_title; 
    }
  }
  return $attachments;    
}

/**
 * Helper function: override the default "Link to node" 
 * path with the Media Browser custom value in order to 
 * drive what the attachment display is going to show.
 *
 * @param $view
 *    View object
 * @param $field
 *    Current field object
 * @param $nid
 *    Node NID
 * @param $key
 *    Field offset
 * @return
 *    New field path
 */
function media_browser_new_path(&$view, &$field, $nid, $key) {
  if (is_numeric($view->result[$key]->nid)) {
    if ($field->options['media_browser'] == 'link_to_node') {
      return $nid.'/media_browser/display/'.$view->name.'.'.$view->current_display.'/link_to_node/destination/'.$_GET['q'] ;
    }
    elseif ($field->options['media_browser'] == 'link_to_field') {
      return $nid.'/media_browser/display/'.$view->name.'.'.$view->current_display.'.'.$key.'/link_to_field/destination/'.$_GET['q'] ;
    }
  }
  else {
    return $nid;
  }
}

/**
 * Helper function: set options in a field object
 *
 * @param $view
 *    View object
 * @param $name
 *    Name of the field
 * @param $options
 *    Options to be set
 * @param $pointer
 *    Point to the sub-options branch (only used in case of recursion)
 */
function media_browser_set_field_options(&$view, $name = NULL, $options = array(), &$pointer = NULL) {
  foreach ($options as $key => $value) {
    if (is_array($value)) {
      return media_browser_set_field_options($view, $name, $value, $view->field[$name]->options[$key]);
    }
    else {
      if ($pointer !== NULL) {
        $pointer[$key] = $value;
      }
      else {
        $view->field[$name]->options[$key] = $value;
      }
    }
  }
}

/**
 * Helper function: get the attachment only if
 * Media Browser was enable on the current display 
 *
 * @param $view
 *    View object
 * @return
 *    Attachment display ID or FALSE
 */
function media_browser_get_attachment(&$view) {
  $style_plugin = $view->display_handler->get_plugin();
  if (isset($style_plugin->options['media_browser']) && $style_plugin->options['media_browser']['media_browser_enabled']) {
    if ($attachment_display = $style_plugin->options['media_browser']['attachment_display']) {
      return $attachment_display;
    }
  }
  return FALSE;
}

/**
 * Helper function: add Node NID filter to View object
 *
 * @param $view
 *    View object
 * @param $nid
 *    Node NID
 */
function media_browser_numeric_filter(&$view, $nid) {
  $options['operator'] = '=';
  $options['group'] = 0;
  $options['exposed'] = FALSE;
  $options['expose'] = array('operator' => FALSE, 'label' => '');
  $options['id'] = 'nid';
  $options['table'] = 'node';
  $options['field'] = 'nid';
  $options['relationship'] = 'none';
  $options['value'] = array('min' => '', 'max' => '', 'value' => $nid);
  $view->display_handler->default_display->options['filters']['nid'] = $options;
}

/**
 * Helper function: set a variable in $_SESSION
 *
 * @param $key
 *    Variable name
 * @param $value
 *    Variable value
 */
function media_browser_set_variable($key, $value = '') {
  $_SESSION['media_browser'][$key] = $value;
}

/**
 * Helper function: get a variable from $_SESSION
 *
 * @param $key
 *    Variable name
 */
function media_browser_get_variable($key) {
  return isset($_SESSION['media_browser'][$key]) ? $_SESSION['media_browser'][$key] : FALSE;
}

/**
 * Helper function: unset a variable in $_SESSION
 *
 * @param $key
 *    Variable name
 */
function media_browser_unset_variable($key) {
  unset($_SESSION['media_browser'][$key]);
}